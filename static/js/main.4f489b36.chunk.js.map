{"version":3,"sources":["img/Map.jpg","firebase/firebase.util.js","components/LoginSignIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","firebase","initializeApp","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","LoginSignIn","state","isSignedIn","uiConfig","signInFlow","signInOptions","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","this","onClick","signOut","currentUser","displayName","alt","src","photoURL","firebaseAuth","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,iC,0GCIrCC,G,YAAS,CACXC,OAAQC,0CACRC,WAAYD,iCACZE,YAAaF,wCACbG,UAAWH,iBACXI,cAAeJ,6BACfK,kBAAmBL,gBACnBM,MAAON,6CACPO,cAAeP,iBAGnBQ,QAAQC,IAAIX,GAGZY,IAASC,cAAcb,GAGHY,IAASE,OACJF,IAASG,YAD3B,IAGDC,EAAW,IAAIJ,IAASE,KAAKG,mBAEnCD,EAASE,oBAAoB,CAACC,OAAQ,mBAKvBP,EAAf,EAJO,I,yECqBQQ,E,4MA3CXC,MAAQ,CAAEC,YAAY,G,EAEtBC,SAAW,CACPC,WAAY,QACZC,cAAe,CACXb,IAASE,KAAKG,mBAAmBS,YACjCd,IAASE,KAAKa,qBAAqBD,YACnCd,IAASE,KAAKc,kBAAkBF,aAEpCG,UAAW,CACPC,cAAe,kBAAM,K,EAI7BC,kBAAoB,WAChBnB,IAASE,OAAOkB,oBAAmB,SAAAC,GAC/B,EAAKC,SAAS,CAAEZ,aAAcW,Q,uDAMlC,OACI,6BACKE,KAAKd,MAAMC,WAEJ,8BACI,2CACA,4BAAQc,QAAS,kBAAMxB,IAASE,OAAOuB,YAAvC,YACA,uCAAazB,IAASE,OAAOwB,YAAYC,aACzC,yBAAKC,IAAI,cAAcC,IAAK7B,IAASE,OAAOwB,YAAYI,YAK5D,kBAAC,IAAD,CAAoBnB,SAAUY,KAAKZ,SAAUoB,aAAc/B,IAASE,c,GApClE8B,aCkBXC,MAdf,WAIE,OACE,yBAAKC,UAAU,OAGb,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.4f489b36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Map.4df2c236.jpg\";","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    databaseURL: process.env.REACT_APP_databaseURL,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n}\n\nconsole.log(config);\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n// firebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => {\n    auth.signInWithPopup(provider);\n}\n\nexport default firebase;","import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\n\nclass LoginSignIn extends Component {\n    state = { isSignedIn: false };\n\n    uiConfig = {\n        signInFlow: 'popup',\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            signInSuccess: () => false\n        }\n    }\n\n    componentDidMount = () => {\n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({ isSignedIn: !!user })\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.isSignedIn ?\n                    (\n                        <span>\n                            <div>Signed In!</div>\n                            <button onClick={() => firebase.auth().signOut()}>Sign out</button>\n                            <h1>Welcome {firebase.auth().currentUser.displayName}</h1>\n                            <img alt=\"profile pic\" src={firebase.auth().currentUser.photoURL}></img>\n                        </span>\n                    )\n                    :\n                    (\n                        <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()} />\n                    )\n                }\n\n            </div>\n        )\n    }\n}\nexport default LoginSignIn;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { auth } from './firebase/firebase.util';\nimport { signInWithGoogle } from '../src/firebase/firebase.util';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport Map from './img/Map.jpg';\nimport LoginSignIn from './components/LoginSignIn';\n\nfunction App() {\n  // console.log(process.env.REACT_APP_apiKey);\n  // const [currentUser, setCurrentUser] = useState(null);\n\n  return (\n    <div className=\"App\">\n      {/* <button type=\"submit\" onClick={signInWithGoogle}>Test</button>\n      <img src={Map} width='80%'></img> */}\n      <LoginSignIn></LoginSignIn>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}